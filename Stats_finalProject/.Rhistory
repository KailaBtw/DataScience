# Data was visually inspected by scrolling through, both are clean
#   colnames(dataFrame)
# Now, looking at our data it is stored as characters, convert to numeric values
dataFrame[, c(1,3:15,17)] <- sapply(dataFrame[, c(1,3:15,17)], as.numeric)
# Data type check looks good
str(dataFrame)
# Lets reverse the value of gii ratio (closer to 0 is better)
#   to match HDI value (closer to 1 is better)
# I.e. (1 - gii value) = giiValueReversed
dataFrame$giiValue <- 1 - dataFrame$giiValue
# We will be comparing several predictors to hdiValues:
#Now lets test correlation between several variables and result (hdi)
paste("correlation (adolBirthRate and MaternalMortality): ",
cor(dataFrame$adolBirthRate,dataFrame$maternalMortality))
paste("correlation (fParlament and adolBirthrate): ",
cor(dataFrame$fSeatsParlament,dataFrame$adolBirthRate))
paste("correlation (fParlament and fEdu): ",
cor(dataFrame$fSeatsParlament,dataFrame$fSecondaryEdu))
paste("correlation (fParlament and fLabor): ",
cor(dataFrame$fSeatsParlament,dataFrame$fLaborForce))
#this has been shown before, more edu less births when young
paste("correlation (fEdu and adolBirthRate): ", #some corr
cor(dataFrame$fSecondaryEdu,dataFrame$adolBirthRate))
paste("correlation (fEdu and fLabor): ",
cor(dataFrame$fSecondaryEdu,dataFrame$fLaborForce))
# Adol birth rate and maternal mortality correlation coefficient is 0.75
# Therefore we will only use one of those predictors
# predictors are: adolBirthrate, fSeatParlament, fSecondaryEdu, fLaborForce
giiHdiCor <- cor(dataFrame$giiValue,dataFrame$hdiValue);
paste("correlation (hdi and gii): ", giiHdiCor)
fLaborCor <- cor(dataFrame$hdiValue,dataFrame$fLaborForce)
paste("correlation (hdi and fLabor): ", fLaborCor)
fSeatCor <- cor(dataFrame$hdiValue,dataFrame$fSeatsParlament)
paste("correlation (hdi and fParlament): ", fSeatCor)
fSecCor <- cor(dataFrame$hdiValue,dataFrame$fSecondaryEdu)
paste("correlation (hdi and fEdu): ",fSecCor)
adolCor <- cor(dataFrame$hdiValue,dataFrame$adolBirthRate)
paste("correlation (hdi and adol): ",adolCor)
fsecAdolCor <- cor(dataFrame$fSecondaryEdu,dataFrame$adolBirthRate)
paste("correlation (fSec and adolBirthRate): ", fsecAdolCor)
maternalCor <- cor(dataFrame$hdiValue,dataFrame$maternalMortality)
paste("correlation (hdi and maternal mortality): ", maternalCor)
#ALL GRAPHS IN main_Ellie - graphs
#adolCov <- cov(dataFrame$maternalMortality,dataFrame$adolBirthRate)
#paste("cov (maternal and adolBirthRate): ", adolCov)
#Now that cleaning and scatter plot are done,
#we start running out simple linear regression models (bit out of order)
#then we test our assumptions and run MLR on the whole data set
lm(dataFrame$hdiValue ~ dataFrame$giiValue)
#lets run our models now
#adolBirthRate maternalMortality
#fSecondaryEdu fLaborForce fSeatsParlament
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu +
fLaborForce +
fSeatsParlament, data = dataFrame)
#fSecondaryEdu fLaborForce fSeatsParlament
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu +
fLaborForce +
fSeatsParlament, data = dataFrame)
model
summary(model)
bigHdi <- hdiValue*1000
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu +
fLaborForce +
fSeatsParlament, data = dataFrame)
summary(model)
confint(model)
par(mfrow = c(2, 2))
plot(model)
library(ggfortify)
par(mfrow = c(2, 2))+
theme(plot.title = element_text(
hjust = 0.5, face="bold",
color="black",
size=14),
axis.title.x = element_text(
size=12,
face="bold"),
axis.title.y = element_text(
size=12,
face="bold"),
axis.text.x = element_text(
face="bold",
color="black",
size=14),
axis.text.y = element_text(
face="bold",
color= "black",
size=14),
axis.line = element_line(
colour = "darkblue",
size = 1,
linetype = "solid"),
legend.position="none"
)
plot(model)
par(mfrow = c(2, 2))
plot(model)+
theme(plot.title = element_text(
hjust = 0.5, face="bold",
color="black",
size=14),
axis.title.x = element_text(
size=12,
face="bold"),
axis.title.y = element_text(
size=12,
face="bold"),
axis.text.x = element_text(
face="bold",
color="black",
size=14),
axis.text.y = element_text(
face="bold",
color= "black",
size=14),
axis.line = element_line(
colour = "darkblue",
size = 1,
linetype = "solid"),
legend.position="none"
)
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model)+
geom_point(aes(color=hdiValue))
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "#710193")
par(mfrow = c(2, 2))
plot(model, col = "#710193", fill="solid")
par(mfrow = c(2, 2))
plot(model, col = "darkblue")
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, bg = "darkblue")
=
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue", pt.bg)
par(mfrow = c(2, 2))
plot(model, col = "darkblue", bg)
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue", pt.bg = c("blue"))
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue", pt.bg = c("blue"))
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue", bg = "blue")
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue")
#Stat 325 Final Project
#Ellie Lagrave
#library(dplyr)
#library(tidyverse)
#Import our CSV data into R studio
setwd('./') #set directory (relative pathing here)
dataFrame = read.csv("combdata.csv")
#Test our data was imported correctly
#head(dataFrame)
#head(hdi_data)
#Our data contains multiple columns of NA, or junk data, remove them
#(probably headers from excel format conversion)
dataFrame = subset(dataFrame, select =
-c(X.1, X.3, X.5, X.7, X.9, X.11, X.13, X.15, X.17,
X.18, X.20, X.22, X.24, X.26, X.28, X.30, X.31, X.32))
#Data frame columns look clean, now clean the rows
#We want to remove na rows, ".." rows and "" rows
dataFrame <- dataFrame[!apply(is.na(dataFrame)
| dataFrame$X == ".."
| dataFrame$X == ""
| dataFrame$X.4 == "NA"
, 1, all),]
#Our rown names are now non sequential from our removal
rownames(dataFrame) <- 1:nrow(dataFrame)
#The end of the data has 15 rows of global/regional data
#subset them just incase we need later (then remove)
comb_global_data <- dataFrame[174:188, ]
#fix global data index
rownames(comb_global_data) <- 1:nrow(comb_global_data)
# Now we want to subset our rows remove global data (footer data)
dataFrame <- head(dataFrame, -15)
#Now we need to remove empty/unneeded header rows
dataFrame = dataFrame[-c(1:3),]
#Our rown names are now non sequential from our removal (again)
rownames(dataFrame) <- 1:nrow(dataFrame)
#Our data frame column names are generic, lets rename columns
newGiiColumnNames <- c(
"hdiRank",
"country",
"giiValue",
"giiRank",
"maternalMortality",
"adolBirthRate",
"fSeatsParlament",
"fSecondaryEdu",
"mSecondaryEdu",
"fLaborForce",
"mLaborForce",
"hdiValue",
"lifeExpec",
"expecYearsSchool",
"meanYearsSchool",
"gniCapita",
"gniMinusHdiRank"
)
for (i in 1:17) {
names(dataFrame)[i] <- newGiiColumnNames[i]
}
# Data was visually inspected by scrolling through, both are clean
#   colnames(dataFrame)
# Now, looking at our data it is stored as characters, convert to numeric values
dataFrame[, c(1,3:15,17)] <- sapply(dataFrame[, c(1,3:15,17)], as.numeric)
# Data type check looks good
str(dataFrame)
# Lets reverse the value of gii ratio (closer to 0 is better)
#   to match HDI value (closer to 1 is better)
# I.e. (1 - gii value) = giiValueReversed
dataFrame$giiValue <- 1 - dataFrame$giiValue
# We will be comparing several predictors to hdiValues:
#Now lets test correlation between several variables and result (hdi)
paste("correlation (adolBirthRate and MaternalMortality): ",
cor(dataFrame$adolBirthRate,dataFrame$maternalMortality))
paste("correlation (fParlament and adolBirthrate): ",
cor(dataFrame$fSeatsParlament,dataFrame$adolBirthRate))
paste("correlation (fParlament and fEdu): ",
cor(dataFrame$fSeatsParlament,dataFrame$fSecondaryEdu))
paste("correlation (fParlament and fLabor): ",
cor(dataFrame$fSeatsParlament,dataFrame$fLaborForce))
#this has been shown before, more edu less births when young
paste("correlation (fEdu and adolBirthRate): ", #some corr
cor(dataFrame$fSecondaryEdu,dataFrame$adolBirthRate))
paste("correlation (fEdu and fLabor): ",
cor(dataFrame$fSecondaryEdu,dataFrame$fLaborForce))
# Adol birth rate and maternal mortality correlation coefficient is 0.75
# Therefore we will only use one of those predictors
# predictors are: adolBirthrate, fSeatParlament, fSecondaryEdu, fLaborForce
giiHdiCor <- cor(dataFrame$giiValue,dataFrame$hdiValue);
paste("correlation (hdi and gii): ", giiHdiCor)
fLaborCor <- cor(dataFrame$hdiValue,dataFrame$fLaborForce)
paste("correlation (hdi and fLabor): ", fLaborCor)
fSeatCor <- cor(dataFrame$hdiValue,dataFrame$fSeatsParlament)
paste("correlation (hdi and fParlament): ", fSeatCor)
fSecCor <- cor(dataFrame$hdiValue,dataFrame$fSecondaryEdu)
paste("correlation (hdi and fEdu): ",fSecCor)
adolCor <- cor(dataFrame$hdiValue,dataFrame$adolBirthRate)
paste("correlation (hdi and adol): ",adolCor)
fsecAdolCor <- cor(dataFrame$fSecondaryEdu,dataFrame$adolBirthRate)
paste("correlation (fSec and adolBirthRate): ", fsecAdolCor)
maternalCor <- cor(dataFrame$hdiValue,dataFrame$maternalMortality)
paste("correlation (hdi and maternal mortality): ", maternalCor)
#ALL GRAPHS IN main_Ellie - graphs
#adolCov <- cov(dataFrame$maternalMortality,dataFrame$adolBirthRate)
#paste("cov (maternal and adolBirthRate): ", adolCov)
#Now that cleaning and scatter plot are done,
#we start running out simple linear regression models (bit out of order)
#then we test our assumptions and run MLR on the whole data set
lm(dataFrame$hdiValue ~ dataFrame$giiValue)
#lets run our models now
#adolBirthRate maternalMortality
#fSecondaryEdu fLaborForce fSeatsParlament
#Set up our multiple regression model
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu +
fLaborForce +
fSeatsParlament, data = dataFrame)
#Check model summary and confidence intervals
summary(model)
confint(model)
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue")
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue", bg = "blue")
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue", bg = "blue", title="sdfs")
paste("correlation (hdi and fParlament): ", fSeatCor)
par(mfrow = c(2, 2))
plot(model, col = "darkblue")
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "darkblue", main="asdas")
#Run the Reg-diag graphs
par(mfrow = c(2, 2), main="asdas")
plot(model, col = "darkblue")
#Run the Reg-diag graphs
par(mfrow = c(2, 2))
plot(model, col = "blue")
par(mfrow = c(4))
#Run the Reg-diag graphs
par(mfrow = c(4, 1))
plot(model, col = "blue")
#Run the Reg-diag graphs
par(mfrow = c(1,4))
plot(model, col = "blue")
par(mfrow = c(1,4))
title("here")
plot(model, col = "blue")
#Run the Reg-diag graphs
par(mfrow = c(1,4))
plot(model, col = "blue")
# Cook's distance
plot(model, 4)
# Residuals vs Leverage
plot(model, 5)
par(mfrow = c(1,5))
plot(model, col = "blue")
#Check model summary and confidence intervals
summary(model)
confint(model)
#Run the Reg-diag graphs
par(mfrow = c(1,4))
plot(model, col = "blue")
# Cook's distance
plot(model, 4)
# Residuals vs Leverage
plot(model, 5)
#Run the Reg-diag graphs
par(mfrow = c(1,4))
plot(model, col = "blue")
# Cook's distance
plot(model, 4, col = "blue")
# Residuals vs Leverage
plot(model, 5, col = "blue")
par(mfrow = c(1,2))
# Cook's distance
plot(model, 4, col = "blue")
# Residuals vs Leverage
plot(model, 5, col = "blue")
#Set up our multiple regression model
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu +
fLaborForce +
fSeatsParlament, data = dataFrame)
#Check model summary and confidence intervals
summary(model)
confint(model)
plot(model)
maternalMortality +
fSecondaryEdu +
fLaborForce +
fSeatsParlament, data = dataFrame)
#Stat 325 Final Project
#Ellie Lagrave
#library(dplyr)
#library(tidyverse)
#Import our CSV data into R studio
setwd('./') #set directory (relative pathing here)
dataFrame = read.csv("combdata.csv")
#Test our data was imported correctly
#head(dataFrame)
#head(hdi_data)
#Our data contains multiple columns of NA, or junk data, remove them
#(probably headers from excel format conversion)
dataFrame = subset(dataFrame, select =
-c(X.1, X.3, X.5, X.7, X.9, X.11, X.13, X.15, X.17,
X.18, X.20, X.22, X.24, X.26, X.28, X.30, X.31, X.32))
#Data frame columns look clean, now clean the rows
#We want to remove na rows, ".." rows and "" rows
dataFrame <- dataFrame[!apply(is.na(dataFrame)
| dataFrame$X == ".."
| dataFrame$X == ""
| dataFrame$X.4 == "NA"
, 1, all),]
#Our rown names are now non sequential from our removal
rownames(dataFrame) <- 1:nrow(dataFrame)
#The end of the data has 15 rows of global/regional data
#subset them just incase we need later (then remove)
comb_global_data <- dataFrame[174:188, ]
#fix global data index
rownames(comb_global_data) <- 1:nrow(comb_global_data)
# Now we want to subset our rows remove global data (footer data)
dataFrame <- head(dataFrame, -15)
#Now we need to remove empty/unneeded header rows
dataFrame = dataFrame[-c(1:3),]
#Our rown names are now non sequential from our removal (again)
rownames(dataFrame) <- 1:nrow(dataFrame)
#Our data frame column names are generic, lets rename columns
newGiiColumnNames <- c(
"hdiRank",
"country",
"giiValue",
"giiRank",
"maternalMortality",
"adolBirthRate",
"fSeatsParlament",
"fSecondaryEdu",
"mSecondaryEdu",
"fLaborForce",
"mLaborForce",
"hdiValue",
"lifeExpec",
"expecYearsSchool",
"meanYearsSchool",
"gniCapita",
"gniMinusHdiRank"
)
for (i in 1:17) {
names(dataFrame)[i] <- newGiiColumnNames[i]
}
# Data was visually inspected by scrolling through, both are clean
#   colnames(dataFrame)
# Now, looking at our data it is stored as characters, convert to numeric values
dataFrame[, c(1,3:15,17)] <- sapply(dataFrame[, c(1,3:15,17)], as.numeric)
# Data type check looks good
str(dataFrame)
# Lets reverse the value of gii ratio (closer to 0 is better)
#   to match HDI value (closer to 1 is better)
# I.e. (1 - gii value) = giiValueReversed
dataFrame$giiValue <- 1 - dataFrame$giiValue
# We will be comparing several predictors to hdiValues:
#Now lets test correlation between several variables and result (hdi)
paste("correlation (adolBirthRate and MaternalMortality): ",
cor(dataFrame$adolBirthRate,dataFrame$maternalMortality))
paste("correlation (fParlament and adolBirthrate): ",
cor(dataFrame$fSeatsParlament,dataFrame$adolBirthRate))
paste("correlation (fParlament and fEdu): ",
cor(dataFrame$fSeatsParlament,dataFrame$fSecondaryEdu))
paste("correlation (fParlament and fLabor): ",
cor(dataFrame$fSeatsParlament,dataFrame$fLaborForce))
#this has been shown before, more edu less births when young
paste("correlation (fEdu and adolBirthRate): ", #some corr
cor(dataFrame$fSecondaryEdu,dataFrame$adolBirthRate))
paste("correlation (fEdu and fLabor): ",
cor(dataFrame$fSecondaryEdu,dataFrame$fLaborForce))
# Adol birth rate and maternal mortality correlation coefficient is 0.75
# Therefore we will only use one of those predictors
# predictors are: adolBirthrate, fSeatParlament, fSecondaryEdu, fLaborForce
giiHdiCor <- cor(dataFrame$giiValue,dataFrame$hdiValue);
paste("correlation (hdi and gii): ", giiHdiCor)
fLaborCor <- cor(dataFrame$hdiValue,dataFrame$fLaborForce)
paste("correlation (hdi and fLabor): ", fLaborCor)
fSeatCor <- cor(dataFrame$hdiValue,dataFrame$fSeatsParlament)
paste("correlation (hdi and fParlament): ", fSeatCor)
fSecCor <- cor(dataFrame$hdiValue,dataFrame$fSecondaryEdu)
paste("correlation (hdi and fEdu): ",fSecCor)
adolCor <- cor(dataFrame$hdiValue,dataFrame$adolBirthRate)
paste("correlation (hdi and adol): ",adolCor)
fsecAdolCor <- cor(dataFrame$fSecondaryEdu,dataFrame$adolBirthRate)
paste("correlation (fSec and adolBirthRate): ", fsecAdolCor)
maternalCor <- cor(dataFrame$hdiValue,dataFrame$maternalMortality)
paste("correlation (hdi and maternal mortality): ", maternalCor)
#ALL GRAPHS IN main_Ellie - graphs
#adolCov <- cov(dataFrame$maternalMortality,dataFrame$adolBirthRate)
#paste("cov (maternal and adolBirthRate): ", adolCov)
#Now that cleaning and scatter plot are done,
#we start running out simple linear regression models (bit out of order)
#then we test our assumptions and run MLR on the whole data set
lm(dataFrame$hdiValue ~ dataFrame$giiValue)
#lets run our models now
#adolBirthRate maternalMortality
#fSecondaryEdu fLaborForce fSeatsParlament
#Set up our multiple regression model
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu +
fLaborForce +
fSeatsParlament, data = dataFrame)
#Check model summary and confidence intervals
summary(model)
confint(model)
#Run the Reg-diag graphs
par(mfrow = c(1,4))
plot(model, col = "blue")
par(mfrow = c(1,2))
# Cook's distance
plot(model, 4, col = "blue")
# Residuals vs Leverage
plot(model, 5, col = "blue")
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu, data = dataFrame)
#Check model summary and confidence intervals
summary(model)
confint(model)
#Run the Reg-diag graphs
par(mfrow = c(1,4))
plot(model, col = "blue")
par(mfrow = c(1,2))
# Cook's distance
plot(model, 4, col = "blue")
# Residuals vs Leverage
plot(model, 5, col = "blue")
#Lets check RSE
sigma(model)/mean(dataFrame$hdiValue)
singleModel <- lm(dataFrame$hdiValue ~ dataFrame$giiValue)
summary(singleModel)
sigma(model)/mean(dataFrame$hdiValue)
#then we test our assumptions and run MLR on the whole data set
singleModel <- lm(dataFrame$hdiValue ~ dataFrame$giiValue)
summary(singleModel)
sigma(singleModel)/mean(dataFrame$hdiValue)
#Set up our multiple regression model
model <- lm(hdiValue ~ adolBirthRate +
maternalMortality +
fSecondaryEdu, data = dataFrame)
#Check model summary and confidence intervals
summary(model)
confint(model)
